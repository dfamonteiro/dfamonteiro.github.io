<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Daniel&#39;s blog</title>
    <link>https://dfamonteiro.com/tags/programming/</link>
    <description>Recent content in Programming on Daniel&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Sep 2025 18:51:17 +0100</lastBuildDate>
    <atom:link href="https://dfamonteiro.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analysing karting lap times for fun and profit</title>
      <link>https://dfamonteiro.com/posts/karting/</link>
      <pubDate>Sat, 20 Sep 2025 18:51:17 +0100</pubDate>
      <guid>https://dfamonteiro.com/posts/karting/</guid>
      <description>&lt;p&gt;Recently, as part of a team-building activity, me and a bunch of work colleagues went to a karting track. The format was quite simple: 5 minutes of practice/qualifying, followed by a 15 minute race. I went to this karting affair with absolutely no racing experience other than playing Gran Turismo 5&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and watching way too much Formula 1, and did pretty well in qualifying, starting P3! Unfortunately my lack of experience surfaced during the race and I spun a couple of times in a tricky hairpin, and as a result I ended up P7 by the checkered flag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving the mathematics of Factorio Quality: Recycler-Assembler Loop</title>
      <link>https://dfamonteiro.com/posts/factorio-recycler-assembler-loop/</link>
      <pubDate>Sat, 28 Dec 2024 22:09:26 +0000</pubDate>
      <guid>https://dfamonteiro.com/posts/factorio-recycler-assembler-loop/</guid>
      <description>&lt;script type=&#34;module&#34;&gt;&#xD;&#xA;    import mermaid from &#39;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs&#39;;&#xD;&#xA;    mermaid.initialize({ startOnLoad: true });&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;p&gt;The recycler-assembler loop is probably the most commonly used quality grinding method in Factorio. It is a two step looping process where in the first step, the ingredients are crafted by an assembler into items, which are then recycled back into ingredients. By having quality and productivity&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; modules in both the assembling and the recycling steps, the quality and items and ingredients in the loop will eventually improve all the way to legendary quality. Emulating a recycler-assembler loop is slightly more complex than the &lt;a href=&#34;https://dfamonteiro.com/posts/factorio-pure-recycler-loop/&#34; &gt;pure recycling loops&lt;/a&gt; we have dealt with previously, but the same fundamental ideas still apply. Please note that functions from previous blog posts will be reused here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving the mathematics of Factorio Quality: Asteroid Chunk Recycling</title>
      <link>https://dfamonteiro.com/posts/factorio-asteroid-chunk-recycling/</link>
      <pubDate>Fri, 27 Dec 2024 16:59:26 +0000</pubDate>
      <guid>https://dfamonteiro.com/posts/factorio-asteroid-chunk-recycling/</guid>
      <description>&lt;script type=&#34;module&#34;&gt;&#xD;&#xA;    import mermaid from &#39;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs&#39;;&#xD;&#xA;    mermaid.initialize({ startOnLoad: true });&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;p&gt;Asteroid chunk recycling is one of the the most effective methods to get legendary resources in Factorio. It is one of the more unique quality grinding setups you&amp;rsquo;ll ever find, but the calculations needed to assess the efficiency of this method are quite straightforward, as it will be shown in this blog post. Please note that I will assume that the reader has read my analysis of &lt;a href=&#34;https://dfamonteiro.com/posts/factorio-pure-recycler-loop/&#34; &gt;pure recyler loops&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving the mathematics of Factorio Quality: Pure Recycler Loop</title>
      <link>https://dfamonteiro.com/posts/factorio-pure-recycler-loop/</link>
      <pubDate>Sun, 15 Dec 2024 23:42:06 +0000</pubDate>
      <guid>https://dfamonteiro.com/posts/factorio-pure-recycler-loop/</guid>
      <description>&lt;script type=&#34;module&#34;&gt;&#xD;&#xA;    import mermaid from &#39;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs&#39;;&#xD;&#xA;    mermaid.initialize({ startOnLoad: true });&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&lt;p&gt;The pure recycler loop is the simplest possible way to grind for legendary items, making it the logical next step of our quality analysis journey. Armed with the knowledge we gained from the &lt;a href=&#34;https://dfamonteiro.com/posts/factorio-quality-1/&#34; &gt;previous post&lt;/a&gt; of &lt;a href=&#34;https://dfamonteiro.com/tags/factorio-quality/&#34; &gt;this series&lt;/a&gt;, we&amp;rsquo;re going to calculate the efficiency of this quality grinding method and do some statistical analysis of how the production of quality items is affected by the quality chance of the recyclers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving the mathematics of Factorio Quality: The Fundamentals</title>
      <link>https://dfamonteiro.com/posts/factorio-quality-1/</link>
      <pubDate>Sun, 08 Dec 2024 13:52:39 +0000</pubDate>
      <guid>https://dfamonteiro.com/posts/factorio-quality-1/</guid>
      <description>&lt;h2 id=&#34;prologue&#34;&gt;&#xD;&#xA;  Prologue&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prologue&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Video games have this incredible ability to evoque certain feelings and states of mind on the people that play them. You can experience pretty much every emotion, starting from happiness, amazement, and wonder going all the way to sadness, frustation, and heartbreak. Games can make you laugh and cry, they can make you focus, and sometimes they make you &lt;em&gt;think&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Factorio is a game that makes you think. It gives such fascinating production and logistics challenges to its players that sometimes they stop playing and write &lt;a href=&#34;https://scholar.google.pt/scholar?hl=en&amp;amp;q=factorio&#34; title=&#34;Factorio research&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;research papers&lt;/a&gt; about the problems they face in this game&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. In the recently released Factorio &lt;a href=&#34;https://www.factorio.com/space-age/content&#34; title=&#34;Space Age web page&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Space Age&lt;/a&gt; expansion, a new feature was added that allows the player to gamble their way into having better versions of every item in the game: &lt;a href=&#34;https://www.factorio.com/blog/post/fff-375&#34; title=&#34;Dev post about quality&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quality&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving the Jindosh Riddle with constraint programming</title>
      <link>https://dfamonteiro.com/posts/jindosh-riddle/</link>
      <pubDate>Sat, 31 Aug 2024 21:38:40 +0100</pubDate>
      <guid>https://dfamonteiro.com/posts/jindosh-riddle/</guid>
      <description>&lt;p&gt;I was playing Dishonored II, when I came across a locked door. In order to make progress in the game, I had to open this door. When you get close to it, you begin to realise that there is more to this door than it first meets the eye:&lt;/p&gt;&#xA;&lt;figure&gt;&#xD;&#xA;    &lt;img src=&#34;https://dfamonteiro.com/images/Jindosh-Lock.png&#34; alt=&#34;Guia circuit track layout&#34;&gt;&#xD;&#xA;    &lt;figcaption&gt;&lt;b&gt;The Jindosh Riddle door lock&lt;/b&gt;&lt;/figcaption&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&lt;p&gt;There is no key that opens this door. Instead, you have 5 slots with names and 5 slots with objects which need to have the right values to unlock the door. You don&amp;rsquo;t have to brute force the combination, though, because right next to the door you can find the following riddle:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Applying clustering techniques to the F1 2024 schedule for fun and profit</title>
      <link>https://dfamonteiro.com/posts/f1-clustering/</link>
      <pubDate>Sat, 06 Jan 2024 02:26:37 +0000</pubDate>
      <guid>https://dfamonteiro.com/posts/f1-clustering/</guid>
      <description>&lt;p&gt;I was finishing my &lt;a href=&#34;https://github.com/dfamonteiro/Formula-1-Cornering-Performance-Breakdown&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Formula 1 Cornering Performance Breakdown&lt;/a&gt; project when I came up with the idea of using the existing code infrastructure to generate cornering data for every track on the 2024 calendar. As part of that project, I tagged every corner with a tag highlighting how fast that corner is. With that information, I can determine how much time is spent on each type of corner. The remainder of the time in lap, which isnâ€™t spent negotiating a corner, is the time the drivers spend at full throttle on a lap, tagged below as &lt;strong&gt;STRAIGHT&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Developing an intermediate representation of Brainfuck using Rust</title>
      <link>https://dfamonteiro.com/posts/brainfuck-ir/</link>
      <pubDate>Wed, 21 Jul 2021 23:11:53 +0100</pubDate>
      <guid>https://dfamonteiro.com/posts/brainfuck-ir/</guid>
      <description>&lt;p&gt;Brainfuck is an interesting programming language, to say the least. As the most prominent &lt;a href=&#34;https://en.wikipedia.org/wiki/Esoteric_programming_language&#34; title=&#34;Esoteric programming language Wikipedia page&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Esoteric programming language&lt;/a&gt; out there, it provides a truly cursed programming experience. It is quite minimalistic as well, featuring only 8 distinct instructions and a programming model that can be best described as a glorified &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_machine&#34; title=&#34;Turing machine Wikipedia page&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turing machine&lt;/a&gt;, making writing a Brainfuck compiler an interesting programming exercise. However, we might as well go a step further and develop an intermediate representation for it, because, well, why not?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
